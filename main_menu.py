from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, FSInputFile, LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from config import PROVIDER_TOKEN, SPEAKERS
from models.silero_tts import synthesize_speech
from utils.normalizer import normalize_numbers
from services.analytics_db import (
    get_stats, increment_tts, increment_purchase, register_user
)
from services.user_limits_db import (
    get_left, get_user_limit,
    add_used, can_speak, can_request, set_last_request, seconds_to_wait, add_purchased
)

router = Router()
user_speakers = {}
user_languages = {}

speaker_names = {
    # RU
    "aidar": "üë®–ú–∏—Ö–∞–∏–ª",
    "baya": "üë±‚Äç‚ôÄÔ∏è–û–ª—å–≥–∞",
    "kseniya": "üë±‚Äç‚ôÄÔ∏è–ö—Å–µ–Ω–∏—è",
    "xenia": "üë±‚Äç‚ôÄÔ∏è–ê–ª–ª–∞",
    "eugene": "üë®–ï–≤–≥–µ–Ω–∏–π",
    # EN
    "en_0": "üë±‚Äç‚ôÄÔ∏è–°—å—é–∑–µ–Ω",
    "en_1": "üë®–ë–∏–ª",
    "en_2": "üë®–î—ç–≤–∏–¥",
    "en_3": "üë±‚Äç‚ôÄÔ∏è–≠—à–ª–∏",
    "en_4": "üë±‚Äç‚ôÄÔ∏è–ú—ç–≥",
    # DE
    "bernd_ungerer": "üë®–ë–µ—Ä–Ω–¥",
    "eva_k": "üë±‚Äç‚ôÄÔ∏è–ï–≤–∞",
    "friedrich": "üë®–§—Ä–∏–¥—Ä–∏—Ö",
    "hokuspokus": "üë±‚Äç‚ôÄÔ∏è–•–∞–Ω–Ω–∞",
    "karlsson": "üë®–ö–∞—Ä–ª—Å—Å–æ–Ω",
    # FR
    "fr_0": "üë®–§–∏–ª–∏–ø–ø",
    "fr_1": "üë®–ü–∞—Ç—Ä–∏–∫",
    "fr_2": "üë®–î–∞–Ω–∏—ç–ª—å",
    "fr_3": "üë®–ê–ª–∞–Ω",
    "fr_4": "üë±‚Äç‚ôÄÔ∏è–ê–Ω–µ—Ç",
    "fr_5": "üë±‚Äç‚ôÄÔ∏è–í–∏–≤—å–µ–Ω",
    # ES
    "es_0": "üë®–õ—É–∏—Å",
    "es_1": "üë®–î–∏–µ–≥–æ",
    "es_2": "üë®–ü–µ–¥—Ä–æ"
}

def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üó£ –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç")],
            [KeyboardButton(text="üíº –ú–æ–π –±–∞–ª–∞–Ω—Å"), KeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –æ–∑–≤—É—á–∫–∏")],
            [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å"), KeyboardButton(text="üìÉ –î—Ä—É–≥–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
    )

@router.message(Command("start"))
async def start(message: Message):
    user_name = message.from_user.first_name or ""
    about_text = (
        f"ü§ñ <b>–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –û–∑–≤—É—á—É –ª—é–±–æ–π —Ç–≤–æ–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ –∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö ‚Äî –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ!</b>\n\n"
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
        "1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ –≥–æ–ª–æ—Å (–û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç)\n"
        "2Ô∏è‚É£ –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª\n\n"
        "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ <b>30 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ–∑–≤—É—á–µ–∫</b>!\n"
        "–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –µ—â—ë –æ–∑–≤—É—á–∫–∏ (–ö—É–ø–∏—Ç—å –æ–∑–≤—É—á–∫–∏)\n\n"
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—à–∏–º –æ–∑–≤—É—á–∫–∞–º (–ú–æ–π –±–∞–ª–∞–Ω—Å)"
    )
    await message.answer(
        about_text,
        reply_markup=get_main_menu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üó£ –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç")
async def handle_tts(message: Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ - –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ Silero TTS
    kb = InlineKeyboardBuilder()
    kb.button(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")
    kb.button(text="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß", callback_data="lang_en")
    kb.button(text="–ù–µ–º–µ—Ü–∫–∏–π üá©üá™", callback_data="lang_de")
    kb.button(text="–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π üá´üá∑", callback_data="lang_fr")
    kb.button(text="–ò—Å–ø–∞–Ω—Å–∫–∏–π üá™üá∏", callback_data="lang_es")
    kb.adjust(2)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –æ–∑–≤—É—á–∫–∏:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("lang_"))
async def handle_language(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = callback.data.replace("lang_", "")
    user_languages[user_id] = lang

    kb = InlineKeyboardBuilder()
    speakers = SPEAKERS.get(lang, [])
    for v in speakers:
        kb.button(text=speaker_names.get(v, v.capitalize()), callback_data=f"voice_{v}")
    kb.adjust(2)
    lang_map = {
        "ru": "—Ä—É—Å—Å–∫–æ–º", "en": "–∞–Ω–≥–ª–∏–π—Å–∫–æ–º", "de": "–Ω–µ–º–µ—Ü–∫–æ–º", "fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º",
        "es": "–∏—Å–ø–∞–Ω—Å–∫–æ–º"
    }
    lang_label = {
        "ru": "–†—É—Å—Å–∫–∏–π", "en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "de": "–ù–µ–º–µ—Ü–∫–∏–π", "fr": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
        "es": "–ò—Å–ø–∞–Ω—Å–∫–∏–π"
    }
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{lang_label.get(lang, lang.capitalize())}</b> —è–∑—ã–∫.\n\n"
        "–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –±–æ—Ç—É —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ. –¢–µ–∫—Å—Ç –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö –±–æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç.\n\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–¥–∞—Ä–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ '+' –ø–µ—Ä–µ–¥ –≥–ª–∞—Å–Ω–æ–π.\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—É–∑—ã '.-'.\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ {lang_map.get(lang, lang)} —è–∑—ã–∫–µ:",
        parse_mode=ParseMode.HTML,
        reply_markup=kb.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("voice_"))
async def set_voice(callback: CallbackQuery):
    user_id = callback.from_user.id
    speaker = callback.data.replace("voice_", "")
    user_speakers[user_id] = speaker
    lang = user_languages.get(user_id, "ru")
    lang_label = {
        "ru": "–†—É—Å—Å–∫–∏–π", "en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "de": "–ù–µ–º–µ—Ü–∫–∏–π", "fr": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
        "es": "–ò—Å–ø–∞–Ω—Å–∫–∏–π"
    }
    speaker_display = speaker_names.get(speaker, speaker.capitalize())
    await callback.message.answer(
        f"‚úÖ –ì–æ–ª–æ—Å <b>{speaker_display}</b> –≤—ã–±—Ä–∞–Ω ({lang_label.get(lang, lang.capitalize())}).\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤).",
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.message(F.text == "üíº –ú–æ–π –±–∞–ª–∞–Ω—Å")
async def handle_balance(message: Message):
    user_id = message.from_user.id
    left = get_left(user_id)
    user_data = get_user_limit(user_id)
    total_used = user_data.get("used", 0)
    text = (
        f"üó£ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n"
        f"–û–∑–≤—É—á–µ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{left}</b>\n"
        f"–ü–ª–∞—Ç–Ω—ã—Ö –æ–∑–≤—É—á–µ–∫ –∫—É–ø–ª–µ–Ω–æ: <b>{user_data.get('purchased', 0)}</b>\n"
        f"–í—Å–µ–≥–æ –æ–∑–≤—É—á–µ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{total_used}</b>\n"
    )
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "üí∞ –ö—É–ø–∏—Ç—å –æ–∑–≤—É—á–∫–∏")
@router.message(Command("buy"))
async def buy_menu(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="10 –æ–∑–≤—É—á–µ–∫ ‚Äî 100‚ÇΩ", callback_data="buy_10_1")
    kb.button(text="30 –æ–∑–≤—É—á–µ–∫ ‚Äî 200‚ÇΩ", callback_data="buy_30_2")
    kb.button(text="50 –æ–∑–≤—É—á–µ–∫ ‚Äî 300‚ÇΩ", callback_data="buy_50_3")
    kb.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("buy_"))
async def buy_callback(call: CallbackQuery):
    _, amount, price = call.data.split("_")
    amount = int(amount)
    price = int(price)

    title = f"{amount} –æ–∑–≤—É—á–µ–∫"
    description = f"–ü–∞–∫–µ—Ç –¥–ª—è –±–æ—Ç–∞: {amount} –æ–∑–≤—É—á–µ–∫"
    payload = f"tts_pack_{amount}"
    currency = "RUB"
    prices = [LabeledPrice(label=title, amount=price * 10000)]

    await call.message.answer_invoice(
        title=title,
        description=description,
        provider_token=PROVIDER_TOKEN,
        currency=currency,
        prices=prices,
        payload=payload,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False,
    )
    await call.answer()

@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@router.message(F.content_type == "successful_payment")
async def process_successful_payment(message: Message):
    payload = message.successful_payment.invoice_payload
    user_id = message.from_user.id
    if payload.startswith("tts_pack_"):
        amount = int(payload.replace("tts_pack_", ""))
        add_purchased(user_id, amount)
        increment_purchase(user_id, amount)
        left = get_left(user_id)
        await message.answer(
            f"‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –æ–∑–≤—É—á–µ–∫.\n"
            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {left} –æ–∑–≤—É—á–µ–∫."
        )

@router.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def help_handler(message: Message):
    text = (
        "ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º –∏ –≥–æ–ª–æ—Å–æ–º (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ä–∞–∑)\n"
        "‚Ä¢ 30 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ–∑–≤—É—á–µ–∫\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –æ–∑–≤—É—á–µ–∫\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç\", –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ –≥–æ–ª–æ—Å\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç\n\n"
        "<b>–ë–∞–ª–∞–Ω—Å –∏ –ø–æ–∫—É–ø–∫–∏:</b>\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –æ–∑–≤—É—á–µ–∫ ‚Äî \"–ú–æ–π –±–∞–ª–∞–Ω—Å\"\n"
        "‚Ä¢ –ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–∑–≤—É—á–∫–∏ ‚Äî \"–ö—É–ø–∏—Ç—å –æ–∑–≤—É—á–∫–∏\"\n\n"
        "<b>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞:</b>\n"
        "‚Ä¢/start\n\n"
        "<b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
        "‚Ä¢ <i>–ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ–∑–≤—É—á–∫–∞?</i> ‚Äî –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç, –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –∞–Ω—Ç–∏—Ñ–ª—É–¥\n"
        "‚Ä¢ <i>–ù–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?</i> ‚Äî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        "<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
        "@skynet0001\n\n"
        "<b>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:</b>\n"
        "–¢–µ–∫—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º."
    )
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "üìÉ –î—Ä—É–≥–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
async def other_nets(message: Message):
    text = (
        "<b>–î—Ä—É–≥–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –±–æ—Ç—ã:</b>\n\n"
    )
    await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)

@router.message()
async def tts_message(message: Message):
    user_id = message.from_user.id

    if not can_request(user_id):
        sec = seconds_to_wait(user_id)
        await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {sec} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ–∑–≤—É—á–∫–æ–π.")
        return

    speaker = user_speakers.get(user_id)
    if not speaker:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç'.")
        return
    text = message.text.strip()
    if not text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏.")
        return
    if len(text) > 500:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    if not can_speak(user_id):
        await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –æ–∑–≤—É—á–∫–∏.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ '–ö—É–ø–∏—Ç—å –æ–∑–≤—É—á–∫–∏'.")
        return

    set_last_request(user_id)
    lang = user_languages.get(user_id, "ru")
    lang_label = {
        "ru": "–†—É—Å—Å–∫–∏–π", "en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "de": "–ù–µ–º–µ—Ü–∫–∏–π", "fr": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
        "es": "–ò—Å–ø–∞–Ω—Å–∫–∏–π", "tt": "–¢–∞—Ç–∞—Ä—Å–∫–∏–π", "uz": "–£–∑–±–µ–∫—Å–∫–∏–π",
        "ba": "–ë–∞—à–∫–∏—Ä—Å–∫–∏–π", "xal": "–ö–∞–ª–º—ã—Ü–∫–∏–π"
    }
    speaker_display = speaker_names.get(speaker, speaker.capitalize())
    await message.answer(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–∑–≤—É—á–∫—É –≥–æ–ª–æ—Å–æ–º <b>{speaker_display}</b> ({lang_label.get(lang, lang.capitalize())})...", parse_mode=ParseMode.HTML)
    try:
        normalized_text = normalize_numbers(text, lang=lang)
        audio_path = await synthesize_speech(normalized_text, speaker, user_id)
        add_used(user_id)
        increment_tts(user_id)
        await message.answer_audio(FSInputFile(audio_path), title=f"–ì–æ–ª–æ—Å: {speaker_display}")
        import os
        os.remove(audio_path)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")
        print("TTS error:", e)