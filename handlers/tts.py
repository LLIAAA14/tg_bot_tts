from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import SPEAKERS, PROVIDER_TOKEN
from services.user_state import user_speakers
from models.silero_tts import synthesize_speech
from utils.normalizer import normalize_numbers
from services.user_limits import can_speak, add_used, get_left, add_purchased

router = Router()

@router.message(Command("start"))
async def start(message: Message):
    kb = InlineKeyboardBuilder()
    for v in SPEAKERS:
        kb.button(text=v.capitalize(), callback_data=f"voice_{v}")
    kb.adjust(2)
    about_text = (
        "ü§ñ <b>–ì–æ–ª–æ—Å–æ–≤–æ–π –±–æ—Ç Silero</b>\n"
        "–û–∑–≤—É—á–∏–≤–∞–µ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π!\n"
        "1. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å\n"
        "2. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª\n\n"
        "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ <b>20 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ–∑–≤—É—á–µ–∫</b>! –ü–æ—Å–ª–µ ‚Äî –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –µ—â—ë –ø–∞–∫–µ—Ç—ã:\n"
        "10 –æ–∑–≤—É—á–µ–∫ ‚Äî 5‚ÇΩ\n20 –æ–∑–≤—É—á–µ–∫ ‚Äî 10‚ÇΩ\n\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–æ–∫: /my\n–ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç: /buy\n\n"
        "<i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–∞ –≤ —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –æ–Ω–∏ –æ–∑–≤—É—á–∏–≤–∞–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ.</i>"
    )
    await message.answer(
        about_text,
        reply_markup=kb.as_markup(),
        parse_mode=ParseMode.HTML
    )

@router.message(Command("my"))
async def my_limit(message: Message):
    left = get_left(message.from_user.id)
    await message.answer(f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {left} –æ–∑–≤—É—á–µ–∫.")

@router.message(Command("buy"))
async def buy_menu(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="10 –æ–∑–≤—É—á–µ–∫ ‚Äî 5‚ÇΩ", callback_data="buy_10_5")
    kb.button(text="20 –æ–∑–≤—É—á–µ–∫ ‚Äî 10‚ÇΩ", callback_data="buy_20_10")
    kb.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("buy_"))
async def buy_callback(call: CallbackQuery):
    # –ü—Ä–∏–º–µ—Ä: callback_data="buy_10_5"
    _, amount, price = call.data.split("_")
    amount = int(amount)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∑–≤—É—á–µ–∫
    price = int(price)    # –¶–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö

    provider_token = PROVIDER_TOKEN
    title = f"{amount} –æ–∑–≤—É—á–µ–∫"
    description = f"–ü–∞–∫–µ—Ç –¥–ª—è –±–æ—Ç–∞: {amount} –æ–∑–≤—É—á–µ–∫"
    payload = f"tts_pack_{amount}"
    currency = "RUB"
    prices = [LabeledPrice(label=title, amount=price * 10000)]  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö!

    await call.message.answer_invoice(
        title=title,
        description=description,
        provider_token=provider_token,
        currency=currency,
        prices=prices,
        payload=payload
    )
    await call.answer()

@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@router.message(F.content_type == "successful_payment")
async def process_successful_payment(message: Message):
    payload = message.successful_payment.invoice_payload
    user_id = message.from_user.id
    if payload.startswith("tts_pack_"):
        amount = int(payload.replace("tts_pack_", ""))
        add_purchased(user_id, amount)
        left = get_left(user_id)
        await message.answer(
            f"‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –æ–∑–≤—É—á–µ–∫.\n"
            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {left} –æ–∑–≤—É—á–µ–∫."
        )

@router.callback_query(F.data.startswith("voice_"))
async def set_voice(callback: CallbackQuery):
    user_id = callback.from_user.id
    speaker = callback.data.replace("voice_", "")
    if speaker not in SPEAKERS:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞!", show_alert=True)
        return
    user_speakers[user_id] = speaker
    await callback.message.answer(
        f"‚úÖ –ì–æ–ª–æ—Å <b>{speaker.capitalize()}</b> –≤—ã–±—Ä–∞–Ω.\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤) –¥–ª—è –æ–∑–≤—É—á–∫–∏.",
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.message()
async def tts_message(message: Message):
    user_id = message.from_user.id
    speaker = user_speakers.get(user_id)
    if not speaker:
        kb = InlineKeyboardBuilder()
        for v in SPEAKERS:
            kb.button(text=v.capitalize(), callback_data=f"voice_{v}")
        kb.adjust(2)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:",
            reply_markup=kb.as_markup()
        )
        return

    text = message.text.strip()
    if not text:
        return
    if len(text) > 300:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    if not can_speak(user_id):
        await message.answer(
            "üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –æ–∑–≤—É—á–∫–∏!\n"
            "–ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /buy"
        )
        return

    normalized_text = normalize_numbers(text)

    await message.answer(
        f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ –≥–æ–ª–æ—Å–æ–º <b>{speaker.capitalize()}</b>, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode=ParseMode.HTML
    )
    try:
        audio_path = await synthesize_speech(normalized_text, speaker, user_id)
        from aiogram.types import FSInputFile
        await message.answer_audio(FSInputFile(audio_path), title=f"–ì–æ–ª–æ—Å: {speaker.capitalize()}")
        import os
        os.remove(audio_path)
        add_used(user_id)
        left = get_left(user_id)
        await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å –æ–∑–≤—É—á–µ–∫: {left}")
    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")